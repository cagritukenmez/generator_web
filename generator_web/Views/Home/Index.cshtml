@{
    ViewBag.Title = "Güç İzleme Paneli";
}
@model generator_web.Models.generator_data

<style>
    .monitoring-container {
        min-height: 100vh;
        padding: 20px;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .panel {
        background: #2a3f5f;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        color: #ffffff;
        position: relative;
        overflow: hidden;
    }

        .panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

    .panel-icon {
        font-size: 24px;
        margin-bottom: 15px;
        opacity: 0.9;
    }

    .panel h3 {
        font-size: 14px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        color: #e0e0e0;
    }

    .parameter-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        font-size: 14px;
    }

        .parameter-row:last-child {
            border-bottom: none;
        }

    .parameter-label {
        color: #b0b0b0;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .parameter-value {
        font-weight: 600;
        color: #ffffff;
        font-family: 'Courier New', monospace;
    }

    .status-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 5px;
        animation: pulse 2s infinite;
    }

    .status-online {
        background-color: #4caf50;
        box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
    }

    .status-offline {
        background-color: #f44336;
        box-shadow: 0 0 10px rgba(244, 67, 54, 0.5);
    }

    .value-voltage {
        color: #bb86fc;
    }

    .value-frequency {
        color: #03dac6;
    }

    .value-power {
        color: #4caf50;
    }

    .value-rpm {
        color: #ff9800;
    }

    .value-temperature {
        color: #f44336;
    }

    .value-percentage {
        color: #2196f3;
    }

    .bottom-bar {
        grid-column: 1 / -1;
        background: #1e2936;
        border-radius: 12px;
        padding: 15px 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
    }

    .bottom-bar-item {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #b0b0b0;
        font-size: 13px;
    }

        .bottom-bar-item span {
            color: #ffffff;
            font-weight: 500;
        }

    .icon-small {
        font-size: 16px;
        color: #667eea;
    }

    @@keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }
    }

    @@media (max-width: 768px) {
        .dashboard-grid {
            grid-template-columns: 1fr;
        }

        .bottom-bar {
            flex-direction: column;
            gap: 10px;
            align-items: flex-start;
        }

        .header {
            flex-direction: column;
            gap: 20px;
            text-align: center;
            display: flex;
        }

            .header h1 {
                font-size: 32px;
            }

        .stats-grid {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }

        .control-buttons {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
    }

    .shimmer {
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        background-size: 200% 100%;
        animation: shimmer 2s infinite;
    }

    @@keyframes shimmer {
        0% {
            background-position: -200% 0;
        }

        100% {
            background-position: 200% 0;
        }
    }





    .dashboard-container {
        max-width: auto;
        margin: 0 auto;
        margin: 10px;
        padding: 10px;
    }

    /* Header */
    .header {
        align-items: center;
        justify-content: space-between;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px 30px;
        margin-bottom: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

        .header h1 {
            padding: 20px 50px 20px;
            display: flex;
            font-size: 48px;
            margin: 7px;
        }

    .header-buttons {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .header-btn {
        padding: 12px 24px;
        border-radius: 25px;
        border: none;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-disconnect {
        background: #ff6b6b;
        color: white;
    }

    .btn-connect {
        background: #4ecdc4;
        color: white;
    }

    .btn-update {
        background: #45b7d1;
        color: white;
    }

    .header-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        padding: 30px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }

    .stat-icon {
        font-size: 40px;
        margin-bottom: 15px;
        display: block;
    }

    .stat-value {
        font-size: 36px;
        font-weight: 700;
        margin-bottom: 10px;
    }

    .stat-label {
        font-size: 16px;
        color: #666;
        font-weight: 500;
    }

    .power .stat-value {
        color: #27ae60;
    }

    .rpm .stat-value {
        color: #e74c3c;
    }

    .fuel .stat-value {
        color: #16a085;
    }

    .battery .stat-value {
        color: #333;
    }

    /* Control Panel */
    .control-panel {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .sistem-alarm {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin-top: 10px;
        margin-top: 30px;
    }

    .control-info {
        text-align: center;
        margin-bottom: 30px;
    }

    .sistem-info {
        text-align: center;
        margin-top: 30px;
        margin-bottom: 30px;
        gap: 10px
    }

    .sistem-alarm p {
        text-align: center;
    }

    .control-info-icon {
        font-size: 40px;
        margin-bottom: 15px;
        display: block;
    }

    .control-info p {
        color: white;
        font-size: 18px;
        font-weight: 500;
    }


    .control-buttons {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 15px;
    }

    .control-btn {
        padding: 18px 24px;
        border-radius: 15px;
        border: none;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        text-transform: uppercase;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

        .control-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }

    .btn-start {
        background: #27ae60;
        color: white;
    }

    .btn-stop {
        background: #e74c3c;
        color: white;
    }

    .btn-auto {
        background: #3498db;
        color: white;
    }

    .btn-manual {
        background: #9b59b6;
        color: white;
    }

    .btn-test {
        background: #f39c12;
        color: white;
    }

    .btn-emergency {
        background: #c0392b;
        color: white;
    }

    .btn-start::before {
        content: "🚀";
    }

    .btn-stop::before {
        content: "⏹️";
    }

    .btn-auto::before {
        content: "🤖";
    }

    .btn-manual::before {
        content: "👷";
    }

    .btn-test::before {
        content: "🔧";
    }

    .btn-emergency::before {
        content: "⚠️";
    }
</style>

<body>

    <div class="dashboard-container">
        <!-- Header -->

        <div class="header">
            <h1>⚡ D-300 MK3 Jeneratör Monitoring Dashboard</h1>
            <div class="header-buttons">
                <button class="header-btn btn-disconnect">🔴 Bağlantı Kontrol Ediliyor...</button>
                <button class="header-btn btn-connect">📡 ------</button>
                <button class="header-btn btn-update">🔄 Güncelleniyor...</button>
            </div>
        </div>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card power">
                <span class="stat-icon">⚡</span>
                <div class="stat-value">@Model.GenUretilenGuc kW</div>
                <div class="stat-label">Jeneratör Gücü</div>
            </div>

            <div class="stat-card rpm">
                <span class="stat-icon">🔄</span>
                <div class="stat-value">@Model.MotorRpm rpm</div>
                <div class="stat-label">Motor RPM</div>
            </div>

            <div class="stat-card fuel">
                <span class="stat-icon">⛽</span>
                <div class="stat-value">@Model.YakitSeviyesi %</div>
                <div class="stat-label">Yakıt Seviyesi</div>
            </div>

            <div class="stat-card battery">
                <span class="stat-icon">🔋</span>
                <div class="stat-value">@Model.BataryaVoltaji V</div>
                <div class="stat-label">Batarya</div>
            </div>
        </div>

        <!-- Control Panel -->
        <div class="control-panel">
            <div class="control-info">
                <p>⚙️ Jeneratörü uzaktan kontrol edin ve sistem modunu değiştirin</p>
            </div>

            <div class="control-buttons">
                <button id="btn-send-start-command" class="control-btn btn-start">START</button>
                <button id ="btn-send-stop-command"class="control-btn btn-stop">STOP</button>
                <button id="btn-send-auto-command"class="control-btn btn-auto">AUTO</button>
                <button id = "btn-send-manuel-command"class="control-btn btn-manual">MANUEL</button>
                <button id="btn-send-test-command"class="control-btn btn-test">TEST</button>
                <button id = "btn-send-acilstop-command"class="control-btn btn-emergency">ACİL STOP</button>
            </div>
        </div>

        <!-- Sistem alarm durumu-->
        <div class="sistem-alarm">
            <div class="sistem-info">
                <h2>🚨 Sistem alarm durumu</h2>
            </div>
            <p>Alarm durumu kontrol ediliyor ⚡</p>
        </div>


    </div>

    <div class="monitoring-container">
        <div class="dashboard-grid">
            <!-- Çalışma Durumu Paneli -->
            <div class="panel">
                <div class="panel-icon">🔧</div>
                <h3>Çalışma Durumu</h3>

                <div class="parameter-row">
                    <span class="parameter-label">
                        <span class="status-indicator status-online"></span>
                        Çalışma Durumu:
                    </span>
                    <span class="parameter-value">@Model.CalismaDurumu</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">⚙️ Operasyon Modu:</span>
                    <span class="parameter-value">@Model.OperationMode</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">⏱️ Sistem Çalışma Süresi:</span>
                    <span class="parameter-value">@Model.SistemCalismaSuresi/(3600*24):@Model.SistemCalismaSuresi/3600:@Model.SistemCalismaSuresi%60</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">✅ Sistem Sağlığı:</span>
                    <span class="parameter-value" style="color: #4caf50;">Sağlıklı kardeşim!</span>
                </div>
            </div>

            <!-- Şebeke Paneli -->
            <div class="panel">
                <div class="panel-icon">⚡</div>
                <h3>Şebeke</h3>

                <div class="parameter-row">
                    <span class="parameter-label">L1 Voltaj:</span>
                    <span class="parameter-value value-voltage">@Model.SebekeVoltaj_l1 V</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">L2 Voltaj:</span>
                    <span class="parameter-value value-voltage">@Model.SebekeVoltaj_l2 V</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">L3 Voltaj:</span>
                    <span class="parameter-value value-voltage">@Model.SebekeVoltaj_l3 V</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Frekans:</span>
                    <span class="parameter-value value-frequency">@Model.SebekeHz Hz</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Toplam Güç:</span>
                    <span class="parameter-value value-power">@Model.ToplamGuc kW</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Şebeke Durumu:</span>
                    <span class="parameter-value">@Model.SebekeDurumu</span>
                </div>
            </div>

            <!-- Jeneratör Paneli -->
            <div class="panel">
                <div class="panel-icon">⚡</div>
                <h3>Jeneratör</h3>

                <div class="parameter-row">
                    <span class="parameter-label">L1 Voltaj:</span>
                    <span class="parameter-value value-voltage">@Model.GenVoltaj_l1 V</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">L2 Voltaj:</span>
                    <span class="parameter-value value-voltage">@Model.GenVoltaj_l2 V</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">L3 Voltaj:</span>
                    <span class="parameter-value value-voltage">@Model.GenVoltaj_l3 V</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Frekans:</span>
                    <span class="parameter-value value-frequency">@Model.GenHz Hz</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Üretilen Güç:</span>
                    <span class="parameter-value value-power">@Model.GenUretilenGuc kW</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Güç Faktörü:</span>
                    <span class="parameter-value">@Model.GenGucFaktoru</span>
                </div>
            </div>

            <!-- Motor Bilgileri Paneli -->
            <div class="panel">
                <div class="panel-icon">🔧</div>
                <h3>Motor Bilgileri</h3>

                <div class="parameter-row">
                    <span class="parameter-label">Motor RPM:</span>
                    <span class="parameter-value value-rpm">@Model.MotorRpm rpm</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Motor Sıcaklık:</span>
                    <span class="parameter-value value-temperature">@Model.MotorSicaklik °C</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Yağ Basıncı:</span>
                    <span class="parameter-value value-percentage">@Model.YagBasinci %</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Yakıt Seviyesi:</span>
                    <span class="parameter-value value-percentage">@Model.YakitSeviyesi %</span>
                </div>

                <div class="parameter-row">
                    <span class="parameter-label">Batarya Voltajı:</span>
                    <span class="parameter-value value-voltage">@Model.BataryaVoltaji V</span>
                </div>
            </div>

            <!-- Alt Bilgi Çubuğu -->
            <div class="bottom-bar">
                <div class="bottom-bar-item">
                    <span class="icon-small">📅</span>
                    Son Güncelleme: <span id="lastUpdate">--:--:--</span>
                </div>

                <div class="bottom-bar-item">
                    <span class="icon-small">📶</span>
                    WiFi Sinyal Gücü: <span id="wifiSignal">--%</span>
                </div>

                <div class="bottom-bar-item">
                    <span class="icon-small">🔄</span>
                    Veri Güncelleme: <span id="dataUpdate">Aktif</span>
                </div>

                <div class="bottom-bar-item">
                    <span class="icon-small">🌐</span>
                    ESP32 IP: <span id="esp32Ip">192.168.1.100</span>
                </div>
            </div>
        </div>
    </div>

</body>

<script>
    /*
      fetchLatest: /api/generator/latest'den veri çeker ve sayfadaki alanları günceller.
      Çalışma şekli:
        - İlk yüklemede hemen çağırır.
        - Sonra her 10 saniyede bir çağırır.
        - Hem camelCase hem PascalCase JSON anahtarlarına uyumlu olacak şekilde fallback kullanır.
        - Panelleri başlığa göre (Şebeke, Jeneratör vs.) bulur ve ilgili satırları günceller.
    */

    (function() {
        const API_URL = '/api/generator/latest';
        const POLL_INTERVAL_MS = 10000;

        // Küçük yardımcılar
        const lowerFirst = s => s ? s.charAt(0).toLowerCase() + s.slice(1) : s;
        const upperFirst = s => s ? s.charAt(0).toUpperCase() + s.slice(1) : s;

        // JSON'dan alan alırken anahtar isimleri camelCase veya PascalCase olabilir.
        function getField(obj, name) {
            if (!obj) return undefined;
            return obj[name] ?? obj[lowerFirst(name)] ?? obj[upperFirst(name)];
        }

        function fmtTimeStamp(ts) {
            if (!ts) return '--:--:--';
            // ts muhtemelen ISO string veya Date time; güvenli şekilde parse etmeye çalış.
            const d = new Date(ts);
            if (isNaN(d)) return String(ts);
            return d.toLocaleString(); // locale'e göre gösterim
        }

        function secsToDHMS(totalSeconds) {
            totalSeconds = Number(totalSeconds) || 0;
            const days = Math.floor(totalSeconds / (3600*24));
            const hours = Math.floor((totalSeconds % (3600*24)) / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = Math.floor(totalSeconds % 60);
            return `${days}d ${hours}h ${minutes}m ${seconds}s`;
        }

        // Panelleri başlığa göre seçer
        function panelByTitle(title) {
            return Array.from(document.querySelectorAll('.panel'))
                .find(p => p.querySelector('h3') && p.querySelector('h3').textContent.trim() === title);
        }

        // panel içindeki label'a göre satırı günceller
        function setPanelRow(panelEl, labelStartText, valueText) {
            if (!panelEl) return;
            Array.from(panelEl.querySelectorAll('.parameter-row')).forEach(row => {
                const lbl = row.querySelector('.parameter-label');
                const val = row.querySelector('.parameter-value');
                if (!lbl || !val) return;
                if (lbl.textContent.trim().startsWith(labelStartText)) {
                    val.textContent = valueText;
                }
            });
        }

        // Basit alan güncelleyiciler (stat-cards gibi)
        function setSelectorText(selector, text) {
            const el = document.querySelector(selector);
            if (el) el.textContent = text;
        }

        // Durum indikatörünü güncelle
        function setStatusOnline(isOnline) {
            document.querySelectorAll('.status-indicator').forEach(si => {
                si.classList.toggle('status-online', isOnline);
                si.classList.toggle('status-offline', !isOnline);
            });
            const updateEl = document.getElementById('dataUpdate');
            if (updateEl) updateEl.textContent = isOnline ? 'Aktif' : 'Bağlantı Yok';
        }

        async function fetchLatest() {
            try {
                const res = await fetch(API_URL, { cache: 'no-store' });
                if (!res.ok) throw new Error(`HTTP ${res.status}`);
                const json = await res.json();

                // Başarı: online göster
                setStatusOnline(true);

                // Hızlı erişim fonksiyonu
                const f = name => getField(json, name);

                // STAT CARDS (üst kısım)
                const genPower = f('GenUretilenGuc') ?? f('genUretilenGuc') ?? f('ToplamGuc') ?? '';
                setSelectorText('.power .stat-value', genPower !== '' ? `${genPower} kW` : '-- kW');

                const rpm = f('MotorRpm') ?? f('motorRpm') ?? '';
                setSelectorText('.rpm .stat-value', rpm !== '' ? `${rpm} rpm` : '-- rpm');

                const fuel = f('YakitSeviyesi') ?? f('yakitSeviyesi') ?? '';
                setSelectorText('.fuel .stat-value', fuel !== '' ? `${fuel} %` : '-- %');

                const batt = f('BataryaVoltaji') ?? f('bataryaVoltaji') ?? '';
                setSelectorText('.battery .stat-value', batt !== '' ? `${batt} V` : '-- V');

                // ALT BİLGİ ÇUBUĞU
                const ts = f('timestamp') ?? f('Timestamp') ?? f('time') ?? f('Time');
                const lastUpdateEl = document.getElementById('lastUpdate');
                if (lastUpdateEl) lastUpdateEl.textContent = fmtTimeStamp(ts);

                const wifi = f('WifiSignal') ?? f('wifiSignal') ?? f('WifiSignalGucu') ?? f('wifiSignalGucu') ?? null;
                if (wifi !== null) {
                    const wifiEl = document.getElementById('wifiSignal');
                    if (wifiEl) wifiEl.textContent = `${wifi}%`;
                }

                const ip = f('Esp32Ip') ?? f('esp32Ip') ?? f('Ip') ?? f('IpAddress') ?? null;
                if (ip !== null) {
                    const ipEl = document.getElementById('esp32Ip');
                    if (ipEl) ipEl.textContent = ip;
                }

                // HEADER durum butonları (örnek)
                const btnConnect = document.querySelector('.btn-connect');
                if (btnConnect) btnConnect.textContent = `📡 ${ip ?? '—'}`;

                const btnUpdate = document.querySelector('.btn-update');
                if (btnUpdate) btnUpdate.textContent = `🔄 Son: ${new Date().toLocaleTimeString()}`;

                // PANELLER İÇERİSİNİ GÜNCELLE (Şebeke)
                const sebeke = panelByTitle('Şebeke');
                if (sebeke) {
                    setPanelRow(sebeke, 'L1 Voltaj:', (f('SebekeVoltaj_l1') ?? f('sebekeVoltaj_l1') ?? '--') + ' V');
                    setPanelRow(sebeke, 'L2 Voltaj:', (f('SebekeVoltaj_l2') ?? '--') + ' V');
                    setPanelRow(sebeke, 'L3 Voltaj:', (f('SebekeVoltaj_l3') ?? '--') + ' V');
                    setPanelRow(sebeke, 'Frekans:', (f('SebekeHz') ?? '--') + ' Hz');
                    setPanelRow(sebeke, 'Toplam Güç:', (f('ToplamGuc') ?? '--') + ' kW');
                    setPanelRow(sebeke, 'Şebeke Durumu:', (f('SebekeDurumu') ?? '--'));
                }

                // JENERATÖR PANELİ
                const jener = panelByTitle('Jeneratör');
                if (jener) {
                    setPanelRow(jener, 'L1 Voltaj:', (f('GenVoltaj_l1') ?? '--') + ' V');
                    setPanelRow(jener, 'L2 Voltaj:', (f('GenVoltaj_l2') ?? '--') + ' V');
                    setPanelRow(jener, 'L3 Voltaj:', (f('GenVoltaj_l3') ?? '--') + ' V');
                    setPanelRow(jener, 'Frekans:', (f('GenHz') ?? '--') + ' Hz');
                    setPanelRow(jener, 'Üretilen Güç:', (f('GenUretilenGuc') ?? '--') + ' kW');
                    setPanelRow(jener, 'Güç Faktörü:', (f('GenGucFaktoru') ?? '--'));
                }

                // MOTOR BİLGİLERİ PANELİ
                const motor = panelByTitle('Motor Bilgileri');
                if (motor) {
                    setPanelRow(motor, 'Motor RPM:', (f('MotorRpm') ?? '--') + ' rpm');
                    setPanelRow(motor, 'Motor Sıcaklık:', (f('MotorSicaklik') ?? '--') + ' °C');
                    setPanelRow(motor, 'Yağ Basıncı:', (f('YagBasinci') ?? '--') + ' %');
                    setPanelRow(motor, 'Yakıt Seviyesi:', (f('YakitSeviyesi') ?? '--') + ' %');
                    setPanelRow(motor, 'Batarya Voltajı:', (f('BataryaVoltaji') ?? '--') + ' V');
                }

                // Çalışma durumu paneli (genel)
                const calisma = panelByTitle('Çalışma Durumu');
                if (calisma) {
                    setPanelRow(calisma, 'Çalışma Durumu:', (f('CalismaDurumu') ?? f('CalismaDurumu') ?? '--'));
                    setPanelRow(calisma, '⏱️ Sistem Çalışma Süresi:', secsToDHMS(f('SistemCalismaSuresi') ?? f('sistemCalismaSuresi') ?? 0));
                    setPanelRow(calisma, '⚙️ Operasyon Modu:', (f('OperationMode') ?? '--'));
                }

                // Opsiyonel: Konsola ayrıntı yaz
                console.debug('Latest data pulled', json);

            } catch (err) {
                console.warn('fetchLatest error', err);
                setStatusOnline(false);
                const lastUpdateEl = document.getElementById('lastUpdate');
                if (lastUpdateEl) lastUpdateEl.textContent = '--:--:--';
                const btnUpdate = document.querySelector('.btn-update');
                if (btnUpdate) btnUpdate.textContent = `🔄 Hata`;
            }
        }

        // Başlat
        fetchLatest();
        // Polling
        setInterval(fetchLatest, POLL_INTERVAL_MS);

    })();
</script>

